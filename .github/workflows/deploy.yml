name: Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main ]  # Replace with your main branch (main or master)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Create deployment package
      run: |
        # Create an archive with required files for frontend
        tar -czf deploy.tar.gz \
          dist \
          src \
          public \
          index.html \
          package*.json \
          Dockerfile \
          .dockerignore \
          docker-compose.yml \
          nginx/ \
          init-letsencrypt.sh \
          vite.config.ts \
          tsconfig*.json \
          tailwind.config.js \
          postcss.config.js

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Copy deployment package to EC2
      run: |
        # Copy archive directly to EC2
        scp -i ~/.ssh/id_rsa deploy.tar.gz ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/frontend-deploy.tar.gz

    - name: Deploy to EC2
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Starting frontend deployment..."
          
          # Navigate to frontend directory
          cd ~/frontend || { echo "Frontend directory not found"; exit 1; }
          
          echo "Copying frontend archive..."
          # Extract the deployment archive
          if [ -f ~/frontend-deploy.tar.gz ]; then
            echo "Unpacking frontend archive..."
            tar -xzf ~/frontend-deploy.tar.gz
            rm ~/frontend-deploy.tar.gz
          else
            echo "Deployment archive not found!"
            exit 1
          fi
          
          # Install Docker and Docker Compose if not present
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io docker-compose-plugin
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          fi
          
          echo "Creating shared network..."
          # Create shared Docker network for backend communication
          sudo docker network create chainlink-tcg 2>/dev/null || echo "Network chainlink-tcg already exists"
          
          echo "Stopping existing frontend containers..."
          # Stop and remove existing containers
          sudo docker compose down
          
          echo "Building and starting frontend containers..."
          # Build and start the frontend
          sudo docker compose build
          sudo docker compose up -d
          
          # Wait a moment for containers to start
          sleep 5
          
          # Check if SSL certificates exist, if not, run setup
          if [ ! -f "./certbot/conf/live/chainsmokers.duckdns.org/fullchain.pem" ]; then
            echo "SSL certificates not found. Running Let's Encrypt setup..."
            sudo ./init-letsencrypt.sh
          else
            echo "SSL certificates found, skipping certificate setup"
          fi
          
          echo "Cleaning unused Docker images..."
          # Clean up unused Docker images to save space
          sudo docker image prune -f
          
          echo "Frontend containers status:"
          sudo docker compose ps
          
          echo "Recent frontend logs:"
          sudo docker compose logs --tail=20 nginx
          
          echo "Frontend deployment completed successfully!"
          echo "Frontend should be available at: https://chainsmokers.duckdns.org"
        EOF
